(defun replace-1to9 (input)
  (let ((tmp))
    (setq tmp (s-replace "one" "o1e" input)
	  tmp (s-replace "two" "t2o" tmp)
	  tmp (s-replace "three" "t3e" tmp)
	  tmp (s-replace "four" "f4r" tmp)
	  tmp (s-replace "five" "f5e" tmp)
	  tmp (s-replace "six" "s6x" tmp)
	  tmp (s-replace "seven" "s7n" tmp)
	  tmp (s-replace "eight" "e8t" tmp)
	  tmp (s-replace "nine" "n9e" tmp))))

(let ((input (split-string (f-read-text "1.input.txt")))
      (s)
      (first)
      (last)
      (n)
      (output 0))
  (dolist (line input)
    (setq s (split-string (mapconcat 'identity (split-string (replace-1to9 line)
							     "[a-z]"
							     t))
			  "" t)
	  first (car s)
	  last (car (last s))
	  n (string-to-number (concat first last))
	  output (+ output n)))
  (print output))
