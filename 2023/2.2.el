(defun get-sets (input)
  (split-string (cadr (split-string input ": ")) "; "))

(defun get-min-cubes (sets)
  (let ((red 0)
	(green 0)
	(blue 0)
	(dices)
	(tmp)
	(dice-number)
	(dice-color))
    (dolist (set sets)
      (setq dices (split-string set ", "))
      (dolist (dice dices)
	(setq tmp (split-string dice))
	(setq dice-number (string-to-number (car tmp)))
	(setq dice-color (cadr tmp))
	(cond ((and (string= dice-color "red")
		    (> dice-number red))
	       (setq red dice-number))
	      ((and (string= dice-color "green")
		    (> dice-number green))
	       (setq green dice-number))
	      ((and (string= dice-color "blue")
		    (> dice-number blue))
	       (setq blue dice-number)))))
    (list red green blue)))

(defun get-min-red-cubes (sets)
  (car (get-min-cubes sets)))

(defun get-min-green-cubes (sets)
  (cadr (get-min-cubes sets)))

(defun get-min-blue-cubes (sets)
  (caddr (get-min-cubes sets)))

(let ((input (split-string (f-read-text "2.input.txt") "\n"))
      (red-cubes 12)
      (green-cubes 13)
      (blue-cubes 14)
      (min-red-cubes 0)
      (min-green-cubes 0)
      (min-blue-cubes 0)
      (sets)
      (output 0))
  (dolist (line input)
    (if (not (string= line ""))
	(progn (setq sets (get-sets line))
	       (setq min-red-cubes (get-min-red-cubes sets))
	       (setq min-green-cubes (get-min-green-cubes sets))
	       (setq min-blue-cubes (get-min-blue-cubes sets))
	       (setq output (+ output (* min-red-cubes min-green-cubes min-blue-cubes))))))
  (print output))

;;65371
