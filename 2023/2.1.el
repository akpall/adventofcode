(defun get-game-number (input)
  (string-to-number (cadr (split-string (car (split-string input ":"))))))

(defun get-sets (input)
  (split-string (cadr (split-string input ": ")) "; "))

(defun check-sets (sets red-cubes green-cubes blue-cubes)
  (let ((red 0)
	(green 0)
	(blue 0)
	(dices)
	(tmp)
	(dice-number)
	(dice-color)
	(is-true t))
    (dolist (set sets)
      (setq dices (split-string set ", "))
      (dolist (dice dices)
	(setq tmp (split-string dice))
	(setq dice-number (string-to-number (car tmp)))
	(setq dice-color (cadr tmp))
	(cond ((string= dice-color "red")
	       (setq red dice-number))
	      ((string= dice-color "green")
	       (setq green dice-number))
	      ((string= dice-color "blue")
	       (setq blue dice-number))))
      (if (or (> red red-cubes)
	      (> green green-cubes)
	      (> blue blue-cubes))
	  (setq is-true nil)))
    (if is-true t nil)))

(let ((input (split-string (f-read-text "2.input.txt") "\n"))
      (game-number 0)
      (red-cubes 12)
      (green-cubes 13)
      (blue-cubes 14)
      (sets)
      (output 0))
  (dolist (line input)
    (if (not (string= line ""))
	(progn (setq game-number (get-game-number line))
	       (setq sets (get-sets line))
	       (if (check-sets sets red-cubes green-cubes blue-cubes)
		   (setq output (+ output game-number))))))
  (print output))
